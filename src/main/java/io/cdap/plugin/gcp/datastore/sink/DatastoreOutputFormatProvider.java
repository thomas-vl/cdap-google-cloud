/*
 * Copyright Â© 2019 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package io.cdap.plugin.gcp.datastore.sink;

import com.google.common.collect.ImmutableMap;
import io.cdap.cdap.api.data.batch.OutputFormatProvider;
import io.cdap.plugin.gcp.datastore.sink.util.DatastoreSinkConstants;

import java.util.Map;
import java.util.Objects;

/**
 * Provides DatastoreOutputFormat's class name and configuration.
 */
public class DatastoreOutputFormatProvider implements OutputFormatProvider {

  private final Map<String, String> configMap;

  /**
   * Gets properties from {@link DatastoreSink} and stores them as properties in map for {@link DatastoreRecordWriter}.
   *
   * @param project datastore project
   * @param serviceAccountPath datastore service account path
   * @param shouldUseAutoGeneratedKey should use auto generated key
   * @param batchSize batch size
   */
  public DatastoreOutputFormatProvider(String project, String serviceAccountPath,
                                       String shouldUseAutoGeneratedKey, String batchSize) {
    ImmutableMap.Builder<String, String> builder = new ImmutableMap.Builder<String, String>()
      .put(DatastoreSinkConstants.CONFIG_PROJECT, project)
      .put(DatastoreSinkConstants.CONFIG_USE_AUTOGENERATED_KEY, shouldUseAutoGeneratedKey)
      .put(DatastoreSinkConstants.CONFIG_BATCH_SIZE, batchSize);

    if (Objects.nonNull(serviceAccountPath)) {
      builder.put(DatastoreSinkConstants.CONFIG_SERVICE_ACCOUNT_FILE_PATH, serviceAccountPath);
    }
    this.configMap = builder.build();
  }

  @Override
  public String getOutputFormatClassName() {
    return DatastoreOutputFormat.class.getName();
  }

  @Override
  public Map<String, String> getOutputFormatConfiguration() {
    return configMap;
  }
}
